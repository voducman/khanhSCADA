/// <reference types="node" />
import { Certificate } from "node-opcua-crypto";
import { Params } from "./toolbox";
import { CertificateStatus, ErrorCallback, KeySize } from "./common";
export interface CertificateManagerOptions {
    keySize?: KeySize;
    location: string;
}
export declare class CertificateManager {
    private keySize;
    private location;
    private _thumbs;
    constructor(options: CertificateManagerOptions);
    readonly configFile: string;
    readonly rootDir: string;
    readonly privateKey: string;
    readonly randomFile: string;
    getCertificateStatus(certificate: Buffer): Promise<CertificateStatus>;
    getCertificateStatus(certificate: Buffer, callback: (err: Error | null, status?: CertificateStatus) => void): void;
    rejectCertificate(certificate: Certificate): Promise<void>;
    rejectCertificate(certificate: Certificate, callback: ErrorCallback): void;
    trustCertificate(certificate: Certificate): Promise<void>;
    trustCertificate(certificate: Certificate, callback: ErrorCallback): void;
    verifyCertificate(certificate: Certificate, callback: ErrorCallback): void;
    initialize(): Promise<void>;
    initialize(callback: (err?: Error) => void): void;
    createSelfSignedCertificate(params: Params): Promise<void>;
    createSelfSignedCertificate(params: Params, callback: ErrorCallback): void;
    createCertificateRequest(params: Params, callback: (err: Error | null, certificateSigningRequestFilename?: string) => void): void;
    _getCertificateStatus(certificate: Certificate, callback: (err: Error | null, status?: CertificateStatus) => void): void;
    private _moveCertificate;
    private _readCertificates;
}
