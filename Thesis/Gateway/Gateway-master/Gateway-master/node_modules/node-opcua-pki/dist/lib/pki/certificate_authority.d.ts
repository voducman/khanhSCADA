import { ErrorCallback, Filename, KeySize } from "./common";
import { Params } from "./toolbox";
export interface CertificateAuthorityOptions {
    keySize: KeySize;
    location: string;
}
export declare class CertificateAuthority {
    readonly keySize: KeySize;
    readonly location: string;
    constructor(options: CertificateAuthorityOptions);
    readonly rootDir: string;
    readonly configFile: string;
    readonly caCertificate: string;
    readonly revocationList: string;
    readonly caCertificateWithCrl: string;
    initialize(): Promise<void>;
    initialize(callback: ErrorCallback): void;
    constructCACertificateWithCRL(): Promise<void>;
    constructCACertificateWithCRL(callback: ErrorCallback): void;
    constructCertificateChain(certificate: Filename): Promise<void>;
    constructCertificateChain(certificate: Filename, callback: ErrorCallback): void;
    createSelfSignedCertificate(certificateFile: Filename, privateKey: Filename, params: Params): Promise<void>;
    createSelfSignedCertificate(certificateFile: Filename, privateKey: Filename, params: Params, callback: ErrorCallback): void;
    revokeCertificate(certificate: Filename, params: Params, callback: ErrorCallback): void;
    revokeCertificate(certificate: Filename, params: Params): Promise<void>;
    signCertificateRequest(certificate: Filename, certificateSigningRequestFilename: Filename, params: Params): Promise<Filename>;
    signCertificateRequest(certificate: Filename, certificateSigningRequestFilename: Filename, params: Params, callback: (err: Error | null, certificate?: Filename) => void): void;
    verifyCertificate(certificate: Filename): Promise<void>;
    verifyCertificate(certificate: Filename, callback: ErrorCallback): void;
}
