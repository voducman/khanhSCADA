"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const async = require("async");
const chalk_1 = require("chalk");
const del = require("del");
const fs = require("fs");
const path = require("path");
const _ = require("underscore");
const applicationurn_1 = require("./misc/applicationurn");
const hostname_1 = require("./misc/hostname");
const subject_1 = require("./misc/subject");
const certificate_authority_1 = require("./pki/certificate_authority");
const certificate_manager_1 = require("./pki/certificate_manager");
const toolbox_1 = require("./pki/toolbox");
const commands = require("yargs");
function get_offset_date(date, nbDays) {
    const d = new Date(date.getTime());
    d.setDate(d.getDate() + nbDays);
    return d;
}
const today = new Date();
const yesterday = get_offset_date(today, -1);
const two_years_ago = get_offset_date(today, -2 * 365);
const next_year = get_offset_date(today, 365);
let gLocalConfig = {};
let g_certificateAuthority;
function construct_CertificateAuthority(callback) {
    assert(_.isFunction(callback), "expecting a callback function");
    assert(_.isString(gLocalConfig.CAFolder), "expecting a CAFolder in config");
    assert(_.isFinite(gLocalConfig.keySize), "expecting a keySize in config");
    if (!g_certificateAuthority) {
        g_certificateAuthority = new certificate_authority_1.CertificateAuthority({
            keySize: gLocalConfig.keySize,
            location: gLocalConfig.CAFolder,
        });
        g_certificateAuthority.initialize(callback);
    }
    else {
        return callback();
    }
}
let certificateManager;
function construct_CertificateManager(callback) {
    assert(_.isFunction(callback), "expecting a callback function");
    assert(_.isString(gLocalConfig.PKIFolder), "expecting a PKIFolder in config");
    if (!certificateManager) {
        certificateManager = new certificate_manager_1.CertificateManager({
            keySize: gLocalConfig.keySize,
            location: gLocalConfig.PKIFolder,
        });
        certificateManager.initialize(callback);
    }
    else {
        return callback();
    }
}
function displayConfig(config) {
    function w(str, l) {
        return (str + "                            ").substr(0, l);
    }
    console.log(chalk_1.default.yellow(" configuration = "));
    _.forEach(config, (value, key) => {
        console.log("   " + chalk_1.default.yellow(w(key, 30)) + " : " + chalk_1.default.cyan(value.toString()));
    });
}
function find_module_root_folder() {
    let rootFolder = path.join(__dirname);
    for (let i = 0; i < 4; i++) {
        if (fs.existsSync(path.join(rootFolder, "package.json"))) {
            return rootFolder;
        }
        rootFolder = path.join(rootFolder, "..");
    }
    assert(fs.existsSync(path.join(rootFolder, "package.json")));
    return rootFolder;
}
function readConfiguration(argv, callback) {
    assert(_.isFunction(callback));
    if (argv.silent) {
        toolbox_1.g_config.silent = true;
    }
    const hostname = hostname_1.get_fully_qualified_domain_name();
    let certificateDir;
    function performSubstitution(str) {
        str = str.replace("{CWD}", process.cwd());
        if (certificateDir) {
            str = str.replace("{root}", certificateDir);
        }
        if (gLocalConfig && gLocalConfig.PKIFolder) {
            str = str.replace("{PKIFolder}", gLocalConfig.PKIFolder);
        }
        str = str.replace("{hostname}", hostname);
        return str;
    }
    function prepare(file) {
        const tmp = path.resolve(performSubstitution(file));
        return toolbox_1.make_path(tmp);
    }
    certificateDir = argv.root;
    assert(typeof certificateDir === "string");
    certificateDir = prepare(certificateDir);
    toolbox_1.mkdir(certificateDir);
    assert(fs.existsSync(certificateDir));
    const default_config = path.join(certificateDir, "config.js");
    function find_default_config_template() {
        const rootFolder = find_module_root_folder();
        let default_config_template = path.join(rootFolder, "bin", path.basename(__filename, ".js") + "_config.example.js");
        if (!fs.existsSync(default_config_template)) {
            default_config_template =
                path.join(__dirname, "..", path.basename(__filename, ".js") + "_config.example.js");
            if (!fs.existsSync(default_config_template)) {
                default_config_template =
                    path.join(__dirname, "../bin/" + path.basename(__filename, ".js") + "_config.example.js");
            }
        }
        return default_config_template;
    }
    const default_config_template = find_default_config_template();
    assert(fs.existsSync(default_config_template));
    if (!fs.existsSync(default_config)) {
        console.log(chalk_1.default.yellow(" Creating default g_config file "), chalk_1.default.cyan(default_config));
        fs.writeFileSync(default_config, fs.readFileSync(default_config_template));
    }
    else {
        console.log(chalk_1.default.yellow(" using  g_config file "), chalk_1.default.cyan(default_config));
    }
    if (!fs.existsSync(default_config)) {
        console.log(chalk_1.default.redBright(" cannot find config file ", default_config));
    }
    toolbox_1.setEnv("RANDFILE", path.join(path.dirname(default_config), "random.rnd"));
    gLocalConfig = require(default_config);
    gLocalConfig.subject = new subject_1.Subject(gLocalConfig.subject);
    gLocalConfig.certificateDir = certificateDir;
    let CAFolder = argv.CAFolder || path.join(certificateDir, "CA");
    CAFolder = prepare(CAFolder);
    gLocalConfig.CAFolder = CAFolder;
    gLocalConfig.PKIFolder = path.join(gLocalConfig.certificateDir, "PKI");
    if (argv.PKIFolder) {
        gLocalConfig.PKIFolder = prepare(argv.PKIFolder);
    }
    gLocalConfig.PKIFolder = prepare(gLocalConfig.PKIFolder);
    if (argv.privateKey) {
        gLocalConfig.privateKey = prepare(argv.privateKey);
    }
    if (argv.applicationUri) {
        gLocalConfig.applicationUri = performSubstitution(argv.applicationUri);
    }
    if (argv.output) {
        gLocalConfig.outputFile = argv.output;
    }
    gLocalConfig.altNames = [];
    if (argv.altNames) {
        gLocalConfig.altNames = argv.altNames.split(";");
    }
    gLocalConfig.dns = [
        hostname_1.get_fully_qualified_domain_name()
    ];
    if (argv.dns) {
        gLocalConfig.dns = argv.dns.split(",");
    }
    gLocalConfig.ip = [];
    if (argv.ip) {
        gLocalConfig.ip = argv.ip.split(",");
    }
    if (argv.keySize) {
        const v = argv.keySize;
        if (v !== 1024 && v !== 2048 && v !== 3072 && v !== 4096) {
            throw new Error("invalid keysize specified " + v + " should be 1024,2048,3072 or 4096");
        }
        gLocalConfig.keySize = argv.keySize;
    }
    if (argv.validity) {
        gLocalConfig.validity = argv.validity;
    }
    return callback();
}
function add_standard_option(options, optionName) {
    switch (optionName) {
        case "root":
            options.root = {
                alias: "r",
                type: "string",
                default: "{CWD}/certificates",
                describe: "the location of the Certificate folder"
            };
            break;
        case "CAFolder":
            options.CAFolder = {
                alias: "c",
                type: "string",
                default: "{root}/CA",
                describe: "the location of the Certificate Authority folder"
            };
            break;
        case "PKIFolder":
            options.PKIFolder = {
                alias: "p",
                type: "string",
                default: "{root}/PKI",
                describe: "the location of the Public Key Infrastructure"
            };
            break;
        case "silent":
            options.silent = {
                alias: "s",
                type: "boolean",
                default: false,
                describe: "minimize output"
            };
            break;
        case "privateKey":
            options.privateKey = {
                alias: "p",
                type: "string",
                default: "{PKIFolder}/own/private_key.pem",
                describe: "the private key to use to generate certificate"
            };
            break;
        case "keySize":
            options.keySize = {
                alias: ["k", "keyLength"],
                type: "number",
                default: 2048,
                describe: "the private key size in bits (1024|2048|3072|4096)"
            };
            break;
        default:
            throw Error("Unknown option  " + optionName);
    }
}
function on_completion(err, done) {
    assert(_.isFunction(done), "expecting function");
    if (err) {
        console.log(err.message);
    }
    done();
}
function createDefaultCertificate(base_name, prefix, key_length, applicationUri, dev, done) {
    assert(key_length === 1024 || key_length === 2048 || key_length === 3072 || key_length === 4096);
    assert(_.isFunction(done));
    const private_key_file = toolbox_1.make_path(base_name, prefix + "key_" + key_length + ".pem");
    const public_key_file = toolbox_1.make_path(base_name, prefix + "public_key_" + key_length + ".pub");
    const certificate_file = toolbox_1.make_path(base_name, prefix + "cert_" + key_length + ".pem");
    const certificate_file_outofdate = toolbox_1.make_path(base_name, prefix + "cert_" + key_length + "_outofdate.pem");
    const certificate_file_not_active_yet = toolbox_1.make_path(base_name, prefix + "cert_" + key_length + "_not_active_yet.pem");
    const certificate_revoked = toolbox_1.make_path(base_name, prefix + "cert_" + key_length + "_revoked.pem");
    const self_signed_certificate_file = toolbox_1.make_path(base_name, prefix + "selfsigned_cert_" + key_length + ".pem");
    console.log(" urn = ", applicationUri);
    const dns = [
        "localhost",
        hostname_1.get_fully_qualified_domain_name()
    ];
    const ip = [];
    function createCertificateIfNotExist(certificate, private_key, applicationUri, startDate, validity, callback) {
        fs.exists(certificate, (exists) => {
            if (exists) {
                console.log(chalk_1.default.yellow("         certificate"), chalk_1.default.cyan(certificate), chalk_1.default.yellow(" already exists => skipping"));
                return callback();
            }
            else {
                createCertificate(certificate, private_key, applicationUri, startDate, validity, callback);
            }
        });
    }
    function createCertificate(certificate, private_key, applicationUri, startDate, validity, callback) {
        const crs_file = certificate + ".csr";
        const configFile = toolbox_1.make_path(base_name, "../certificates/PKI/own/openssl.cnf");
        const params = {
            privateKey: private_key,
            rootDir: ".",
            configFile
        };
        toolbox_1.createCertificateSigningRequest(crs_file, params, (err) => {
            if (err) {
                return callback(err);
            }
            g_certificateAuthority.signCertificateRequest(certificate, crs_file, {
                applicationUri,
                dns,
                ip,
                startDate,
                validity
            }, callback);
        });
    }
    function createSelfSignedCertificate(certificate, private_key, applicationUri, startDate, validity, callback) {
        g_certificateAuthority.createSelfSignedCertificate(certificate, private_key, {
            applicationUri,
            dns,
            ip,
            startDate,
            validity
        }, callback);
    }
    function revoke_certificate(certificate, callback) {
        g_certificateAuthority.revokeCertificate(certificate, {}, callback);
    }
    function createPrivateKeyIfNotExist(privateKey, keyLength, callback) {
        fs.exists(privateKey, (exists) => {
            if (exists) {
                console.log(chalk_1.default.yellow("         privateKey"), chalk_1.default.cyan(privateKey), chalk_1.default.yellow(" already exists => skipping"));
                return callback();
            }
            else {
                toolbox_1.createPrivateKey(privateKey, keyLength, callback);
            }
        });
    }
    let tasks1 = [
        (callback) => toolbox_1.displaySubtitle(" create private key :" + private_key_file, callback),
        (callback) => createPrivateKeyIfNotExist(private_key_file, key_length, callback),
        (callback) => toolbox_1.displaySubtitle(" extract public key " + public_key_file + " from private key ", callback),
        (callback) => toolbox_1.getPublicKeyFromPrivateKey(private_key_file, public_key_file, callback),
        (callback) => toolbox_1.displaySubtitle(" create Certificate " + certificate_file, callback),
        (callback) => createCertificateIfNotExist(certificate_file, private_key_file, applicationUri, yesterday, 365, callback),
        (callback) => toolbox_1.displaySubtitle(" create self signed Certificate " + self_signed_certificate_file, callback),
        (callback) => {
            fs.exists(self_signed_certificate_file, (exists) => {
                if (exists) {
                    return callback();
                }
                createSelfSignedCertificate(self_signed_certificate_file, private_key_file, applicationUri, yesterday, 365, callback);
            });
        }
    ];
    if (dev) {
        const tasks2 = [
            (callback) => createCertificateIfNotExist(certificate_file_outofdate, private_key_file, applicationUri, two_years_ago, 365, callback),
            (callback) => createCertificateIfNotExist(certificate_file_not_active_yet, private_key_file, applicationUri, next_year, 365, callback),
            (callback) => {
                fs.exists(certificate_revoked, (exists) => {
                    if (!exists) {
                        return callback();
                    }
                    createCertificate(certificate_revoked, private_key_file, applicationUri, yesterday, 365, (err) => {
                        revoke_certificate(certificate_revoked, callback);
                    });
                });
            }
        ];
        tasks1 = tasks1.concat(tasks2);
    }
    async.series(tasks1, done);
}
let done = (err) => {
};
function create_default_certificates(dev, done) {
    function __create_default_certificates(base_name, prefix, key_length, applicationUri, done) {
        createDefaultCertificate(base_name, prefix, key_length, applicationUri, dev, done);
    }
    assert(gLocalConfig);
    const base_name = gLocalConfig.certificateDir;
    assert(fs.existsSync(base_name));
    const hostname = hostname_1.get_fully_qualified_domain_name();
    console.log(chalk_1.default.yellow("     hostname = "), chalk_1.default.cyan(hostname));
    const clientURN = applicationurn_1.makeApplicationUrn(hostname, "NodeOPCUA-Client");
    const serverURN = applicationurn_1.makeApplicationUrn(hostname, "NodeOPCUA-Server");
    const discoveryServerURN = applicationurn_1.makeApplicationUrn(hostname, "NodeOPCUA-DiscoveryServer");
    const task1 = [
        (callback) => toolbox_1.displayTitle("Create  Application Certificate for Server & its private key", callback),
        (callback) => {
            async.parallelLimit([
                (callback) => __create_default_certificates(base_name, "client_", 1024, clientURN, callback),
                (callback) => __create_default_certificates(base_name, "client_", 2048, clientURN, callback),
                (callback) => __create_default_certificates(base_name, "client_", 3072, clientURN, callback),
                (callback) => __create_default_certificates(base_name, "client_", 4096, clientURN, callback),
            ], 1, callback);
        },
        (callback) => toolbox_1.displayTitle("Create  Application Certificate for Client & its private key", callback),
        (callback) => {
            async.parallelLimit([
                (callback) => __create_default_certificates(base_name, "server_", 1024, serverURN, callback),
                (callback) => __create_default_certificates(base_name, "server_", 2048, serverURN, callback),
                (callback) => __create_default_certificates(base_name, "server_", 3072, serverURN, callback),
                (callback) => __create_default_certificates(base_name, "server_", 4096, serverURN, callback),
            ], 1, callback);
        },
        (callback) => toolbox_1.displayTitle("Create  Application Certificate for DiscoveryServer & its private key", callback),
        (callback) => {
            async.parallelLimit([
                (callback) => __create_default_certificates(base_name, "discoveryServer_", 1024, discoveryServerURN, callback),
                (callback) => __create_default_certificates(base_name, "discoveryServer_", 2048, discoveryServerURN, callback),
                (callback) => __create_default_certificates(base_name, "discoveryServer_", 3072, discoveryServerURN, callback),
                (callback) => __create_default_certificates(base_name, "discoveryServer_", 4096, discoveryServerURN, callback)
            ], 1, callback);
        },
    ];
    async.series(task1, (err) => {
        if (err) {
            console.log("ERROR FOUND => ", err.message);
        }
        done(err);
    });
}
function createDefaultCertificates(dev, callback) {
    async.series([
        (callback) => construct_CertificateAuthority(callback),
        (callback) => construct_CertificateManager(callback),
        (callback) => create_default_certificates(dev, callback)
    ], (err) => {
        if (err) {
            console.log(chalk_1.default.red("ERROR "), err.message);
        }
        return callback(err);
    });
}
commands.strict()
    .wrap(132)
    .command("demo", "create default certificate for node-opcua demos", (yargs) => {
    assert(_.isFunction(done));
    function command_demo(local_argv, done) {
        assert(_.isFunction(done), "expecting a callback");
        const tasks = [];
        tasks.push((callback) => toolbox_1.ensure_openssl_installed(callback));
        tasks.push((callback) => toolbox_1.displayChapter("Create Demo certificates", callback));
        tasks.push((callback) => toolbox_1.displayTitle("reading configuration", callback));
        tasks.push((callback) => readConfiguration(local_argv, callback));
        if (local_argv.clean) {
            tasks.push((callback) => toolbox_1.displayTitle("Cleaning old certificates", callback));
            tasks.push((callback) => {
                assert(gLocalConfig);
                const certificateDir = gLocalConfig.certificateDir;
                del(certificateDir + "/*.pem*").then(() => {
                    return callback();
                });
            });
            tasks.push((callback) => {
                assert(gLocalConfig);
                const certificateDir = gLocalConfig.certificateDir;
                del(certificateDir + "/*.pub").then(() => {
                    return callback();
                });
            });
            tasks.push((callback) => {
                assert(gLocalConfig);
                const certificateDir = gLocalConfig.certificateDir;
                toolbox_1.mkdir(certificateDir);
                console.log("   done");
                return callback();
            });
        }
        tasks.push((callback) => toolbox_1.displayTitle("create certificates", callback));
        tasks.push((callback) => createDefaultCertificates(local_argv.dev, callback));
        async.series(tasks, (err) => on_completion(err, done));
    }
    const options = {};
    options.dev = {
        type: "boolean",
        describe: "create all sort of fancy certificates for dev testing purposes"
    };
    options.clean = {
        type: "boolean",
        describe: "Purge existing directory [use with care!]"
    };
    add_standard_option(options, "silent");
    add_standard_option(options, "root");
    const local_argv = yargs.strict().wrap(132)
        .options(options)
        .usage("$0  demo [--dev] [--silent] [--clean]")
        .example("$0  demo --dev", "create a set of demo cerficates")
        .help("help")
        .argv;
    if (local_argv.help) {
        yargs.showHelp();
        done();
    }
    else {
        command_demo(local_argv, done);
    }
    return yargs;
})
    .command("createCA", "create a Certificate Authority", (yargs) => {
    assert(_.isFunction(done));
    function command_new_certificate_authority(local_argv, done) {
        const tasks = [];
        tasks.push(toolbox_1.ensure_openssl_installed);
        tasks.push((callback) => readConfiguration(local_argv, callback));
        tasks.push((callback) => construct_CertificateAuthority(callback));
        async.series(tasks, (err) => on_completion(err, done));
    }
    const options = {};
    add_standard_option(options, "root");
    add_standard_option(options, "CAFolder");
    add_standard_option(options, "keySize");
    const local_argv = yargs.strict().wrap(132)
        .options(options)
        .help("help")
        .argv;
    if (local_argv.help) {
        yargs.showHelp();
        done();
    }
    else {
        command_new_certificate_authority(local_argv, done);
    }
    return yargs;
})
    .command("createPKI", "create a Public Key Infrastructure", (yargs) => {
    function command_new_public_key_infrastructure(local_argv, done) {
        const tasks = [];
        tasks.push((callback) => readConfiguration(local_argv, callback));
        tasks.push((callback) => construct_CertificateManager(callback));
        async.series(tasks, (err) => on_completion(err, done));
    }
    const options = {};
    add_standard_option(options, "root");
    add_standard_option(options, "PKIFolder");
    add_standard_option(options, "keySize");
    const local_argv = yargs.strict().wrap(132)
        .options(options)
        .help("help")
        .argv;
    if (local_argv.help) {
        yargs.showHelp();
        done();
    }
    else {
        command_new_public_key_infrastructure(local_argv, done);
    }
    return yargs;
})
    .command("certificate", "create a new certificate", (yargs) => {
    assert(_.isFunction(done));
    function command_certificate(local_argv, done) {
        assert(_.isFunction(done));
        const selfSigned = local_argv.selfSigned;
        if (!selfSigned) {
            command_full_certificate(local_argv, done);
        }
        else {
            command_selfsigned_certificate(local_argv, done);
        }
        return yargs;
    }
    function command_selfsigned_certificate(local_argv, done) {
        const tasks = [];
        tasks.push((callback) => readConfiguration(local_argv, callback));
        tasks.push((callback) => construct_CertificateManager(callback));
        tasks.push((callback) => toolbox_1.displaySubtitle(" create self signed Certificate " + gLocalConfig.outputFile, callback));
        tasks.push((callback) => {
            const params = {
                applicationUri: gLocalConfig.applicationUri || "",
                dns: gLocalConfig.dns || [],
                ip: gLocalConfig.ip || [],
                outputFile: gLocalConfig.outputFile || "self_signed_certificate.pem",
                startDate: gLocalConfig.startDate || new Date(),
                subject: gLocalConfig.subject,
                validity: gLocalConfig.validity || 365,
            };
            certificateManager.createSelfSignedCertificate(params, (err) => {
                callback(err);
            });
        });
        async.series(tasks, (err) => on_completion(err, done));
        return yargs;
    }
    function command_full_certificate(local_argv, done) {
        let the_csr_file;
        let certificate;
        const tasks = [];
        tasks.push((callback) => readConfiguration(local_argv, callback));
        tasks.push((callback) => construct_CertificateManager(callback));
        tasks.push((callback) => construct_CertificateAuthority(callback));
        tasks.push((callback) => {
            assert(fs.existsSync(gLocalConfig.CAFolder), " CA folder must exist");
            return callback();
        });
        tasks.push((callback) => {
            gLocalConfig.privateKey = undefined;
            certificateManager.createCertificateRequest(gLocalConfig, (err, csr_file) => {
                if (err) {
                    return callback(err);
                }
                the_csr_file = csr_file;
                console.log(" csr_file = ", csr_file);
                return callback();
            });
        });
        tasks.push((callback) => {
            certificate = the_csr_file.replace(".csr", ".pem");
            if (fs.existsSync(certificate)) {
                return callback(new Error(" File " + certificate + " already exist"));
            }
            g_certificateAuthority.signCertificateRequest(certificate, the_csr_file, gLocalConfig, (err) => {
                return callback(err);
            });
        });
        tasks.push((callback) => {
            console.error("g_config.outputFile=", gLocalConfig.outputFile);
            assert(_.isString(gLocalConfig.outputFile));
            fs.writeFileSync(gLocalConfig.outputFile, fs.readFileSync(certificate, "ascii"));
            return callback();
        });
        async.series(tasks, (err) => on_completion(err, done));
    }
    const options = {
        applicationUri: {
            alias: "a",
            demand: true,
            describe: "the application URI",
            default: "urn:{hostname}:Node-OPCUA-Server",
            type: "string"
        },
        output: {
            default: "my_certificate.pem",
            alias: "o",
            demand: true,
            describe: "the name of the generated certificate =>",
            type: "string"
        },
        selfSigned: {
            alias: "s",
            default: false,
            type: "boolean",
            describe: "if true, certificate will be self-signed"
        },
        validity: {
            alias: "v",
            default: null,
            type: "number",
            describe: "the certificate validity in days"
        },
        dns: {
            alias: "dns",
            default: null,
            type: "string",
            describe: "the list of valid domain name"
        },
        ip: {
            alias: "ip",
            default: null,
            type: "string",
            describe: "the list of valid IP"
        }
    };
    add_standard_option(options, "silent");
    add_standard_option(options, "root");
    add_standard_option(options, "CAFolder");
    add_standard_option(options, "PKIFolder");
    add_standard_option(options, "privateKey");
    const local_argv = yargs.strict().wrap(132)
        .options(options)
        .help("help")
        .argv;
    if (local_argv.help) {
        yargs.showHelp();
        done();
    }
    else {
        command_certificate(local_argv, done);
    }
    return yargs;
})
    .command("revoke", "revoke a existing certificate", (yargs) => {
    function revokeCertificateFromCommandLine(argv, done) {
        function revoke_certificate(certificate, callback) {
            g_certificateAuthority.revokeCertificate(certificate, {}, callback);
        }
        const certificate = path.resolve(argv._[1]);
        console.log(chalk_1.default.yellow(" Certificate to revoke : "), chalk_1.default.cyan(certificate));
        if (!fs.existsSync(certificate)) {
            return done(new Error("cannot find certificate to revoke " + certificate));
        }
        const tasks = [];
        tasks.push((callback) => readConfiguration(local_argv, callback));
        tasks.push((callback) => construct_CertificateAuthority(callback));
        tasks.push((callback) => revoke_certificate(certificate, callback));
        async.series(tasks, (err) => {
            if (!err) {
                console.log("done ... ", err);
                console.log("\nyou should now publish the new Certificate Revocation List");
            }
            else {
                console.log("done ... ", err.message);
            }
            done(err);
        });
        return yargs;
    }
    const options = {};
    add_standard_option(options, "root");
    add_standard_option(options, "CAFolder");
    const local_argv = yargs.strict().wrap(132)
        .help("help")
        .usage("$0 revoke  my_certificate.pem")
        .options(options)
        .demand(2)
        .argv;
    if (local_argv.help) {
        yargs.showHelp();
        done();
    }
    else {
        revokeCertificateFromCommandLine(local_argv, done);
    }
    return yargs;
})
    .command("dump", "display a certificate", (yargs) => {
    function dumpCertificateFromCommandLine(argv, done) {
        const certificate = path.resolve(argv._[1]);
        toolbox_1.dumpCertificate(certificate, (err) => done(err));
    }
    const options = {};
    const local_argv = yargs.strict().wrap(132)
        .help("help")
        .usage("$0 dump  my_certificate.pem")
        .options(options)
        .demand(1)
        .argv;
    if (local_argv.help || local_argv._.length <= 1) {
        yargs.showHelp();
        done();
    }
    else {
        dumpCertificateFromCommandLine(local_argv, done);
    }
    return yargs;
})
    .command("toder", "convert a certificate to a DER format with finger print", (yargs) => {
    toolbox_1.g_config.silent = true;
    function convertToDerFromCommandLine(argv, done) {
        const certificate = path.resolve(argv._[1]);
        toolbox_1.toDer(certificate, (err) => done(err));
    }
    const options = {};
    const local_argv = yargs.strict().wrap(132)
        .help("help")
        .usage("$0 toder  my_certificate.pem")
        .options(options)
        .demand(1)
        .argv;
    if (local_argv.help) {
        yargs.showHelp();
        done();
    }
    else {
        convertToDerFromCommandLine(local_argv, done);
    }
    return yargs;
})
    .command("fingerprint", "print the certificate fingerprint", (yargs) => {
    toolbox_1.g_config.silent = true;
    function cmdFingerPrint(argv, done) {
        const certificate = path.resolve(argv._[1]);
        toolbox_1.fingerprint(certificate, (err, data) => {
            if (!err) {
                const s = data.split("=")[1].split(":").join("").trim();
                console.log(s);
            }
            done(err);
        });
    }
    const options = {};
    add_standard_option(options, "silent");
    const local_argv = yargs.strict().wrap(132)
        .help("help")
        .usage("$0 toder  my_certificate.pem")
        .options(options)
        .demand(1)
        .argv;
    if (local_argv.help) {
        yargs.showHelp();
        done();
    }
    else {
        cmdFingerPrint(local_argv, done);
    }
    return yargs;
})
    .command("$0", "help", (yargs) => {
    console.log("--help for help");
    return yargs;
})
    .epilog("Copyright (c) - NodeOPCUA - 2018")
    .help("help").strict();
function main(argumentsList, _done) {
    if (_done) {
        done = _done;
    }
    commands.parse(argumentsList, (err, g_argv) => {
        if (err) {
            console.log(" err = ", err);
            console.log(" use --help for more info");
            setImmediate(() => {
                commands.showHelp();
                done(err);
            });
        }
        else {
            if (g_argv.help) {
                setImmediate(() => {
                    commands.showHelp();
                    done();
                });
            }
            else {
                done();
            }
        }
    });
}
exports.main = main;
//# sourceMappingURL=crypto_create_CA.js.map